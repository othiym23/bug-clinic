Most often, a stacktrace is your first sign that something has gone
wrong in your code. Learning to read them correctly is a critical
skill for Node developers. Almost as important is learning how to make
them useful. This is not useful:

    SyntaxError: Unexpected token u
        at Object.parse (native)
        at /data/app/important-program.js:259:57
        at fs.js:207:20
        at Object.oncomplete (fs.js:107:15)

You open up important-program.js, and it's a call to JSON.parse in a
closure returned from an anonymous function. Great. There's no way to
figure out from the stacktrace what file it was trying to read, or
necessarily what function was making the call in the first place. The
stack has been reset, your program has crashed, and any interesting
state about what was happening when things went haywire has been lost.

You *could* fix this with a lot of logging, but sometimes you need more
context to even get started. This is where "long stacktrace" modules
come in handy. They do some low-level manipulation of the Node runtime
to allow them to stitch all of the asynchronous call stacks into one
long stacktrace. There are many modules that offer this functionality,
but when this was written, the most reliable is `stackup`, which takes
advantage of the experimental new asyncListener API that will eventually
be part of Node core.

Long stacktraces are not a silver bullet:

 * You probably don't want to be using a long stacktrace module in
   production. They add a significant amount of overhead, as they
   can't know in advance which calls are going to result in errors,
   and creating all those Errors is expensive.
 * If regular asynchronous stacktraces give you too little
   information, long stacktraces can give you way too much, since
   frequently stacktraces will extend all the way back to when the
   process started. Learning to weed out extraneous information is an
   acquired skill.

To install `stackup`, do `npm install stackup`, and then in your program,
put a `require('stackup');` near the top.

## CHALLENGE

As an example, what happens when you run this program with bad input?

    var readFile = require("fs").readFile;

    module.exports = scenario;

    function scenario(jsonPath, cb) {
      readFile(jsonPath, {encoding : "utf8"}, function (error, contents) {
        cb(error, JSON.parse(contents));
      });
    }

The challenge here is to figure out how to get a stacktrace that shows
the bug, and to get the long stacktrace to the verifier by passing the
Error you get to the callback. You will probably need to use either
domains or the trycatch module, because a simple try / catch won't
work. If you don't know domains, read the Node API documentation on
them, or use this brutally abbreviated primer:

    var domain = require("domain");

    function doSomethingDangerousAndAsync(cb) {
      // create a new domain
      var d = domain.create();

      // "handle" the error (OMG DON'T DO THIS IN PRODUCTION CODE)
      d.on("error", cb);

      // use the domain
      d.run(function () {
        doDangerousAsyncThing(cb);
      });
    }
