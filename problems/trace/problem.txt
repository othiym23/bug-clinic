If you've been around Node for a while, you're probably wondering
when this tutorial would get around to discussing DTrace, the dynamic
tracing system. DTrace is perhaps the most powerful, most general 
tracing tool ever developed. Its killer feature is that it allows 
you to instrument and observe the internals of Node processes without 
you, as a developer, making any changes to your own code.

However, DTrace has a major disadvantage: several of its most useful
features are only available on SmartOS, Joyent's cloud operating
system (also in Solaris and recent versions of FreeBSD and ). DTrace 
is not the only dynamic tracing system out there, and Node actually 
has support for several different tracing providers, including Event 
Tracing for Windows and Linux's systemtap and ktap.

But that doesn't help you if, like most Node developers, you're
primarily a JavaScript developer. The ideal solution is one that
allows you to take advantage of the hooks added to Node for DTrace
from JavaScript. Work on this is underway, and should be available in
Node sometime around the point that it finally hits 1.0.

In the meantime, the scaffolding for adding traceability to your
applications is available through third-party modules. The furthest
along is jstrace, which has all of the tools and modules necessary
to start adding probes, or trace points, to your own code. Another
promising project, which may eventually be incorporated into Node
itself, is the very similarly-named jtrace. Both of these can be
seen as a useful generalization of the NODE_DEBUG process described
elsewhere, with the useful additional property that the program
listening for trace data is completely separated from the program
emitting trace events. The main downside is that it's still pretty
labor-intensive getting all the probes into your program in the first
place.

To install jstrace, run `npm install --global jstrace` (maybe with sudo
on Linux, probably logged in as an administrator on Windows).

## CHALLENGE

So! Let's see how this works! Write a web server instrumented using
jstrace. The server should listen on port 9999 and return one of
two responses. When it gets a GET response to /prognosis, it should
return a status code of 200 and a payload of '{"ok":true}'. For ALL
other requests, it should return a status code of 404 and a payload
of '{"error":"notfound"}'. It should also print the message "up" to
standard error when it's listening, so the verifier knows it's ready
for requests.

The basic syntax of a `jstrace` call is `jstrace(signal, data)`, where
signal is the string name of the signal you're sending, and the data
is a JSON object with the data you'd like to pass back.

Your server ('server.js', for instance) should include two jstrace
probes:

1. At the beginning of the response handler, "request:start", with
   a payload object that includes the URL of the request (as "url");
2. Immediately after calling `res.end()` to send the response body,
   "request:end", with a payload object that includes the HTTP status
   code as "statusCode", and the response body (as a JavaScript
   object) with the name "body".

You should be able to start your server, run `jstrace -p <server-pid>`
with the tracer script below, and see the status codes and URLs
being printed to the terminal as you hit your server with curl:

    // watcher.js
    module.exports = {
      local : function (traces) {
        traces.on("request:start", function (trace) {
          console.log(trace.url);
        });

        traces.on("request:end", function (trace) {
          console.error(trace.statusCode);
        });
      }
    };

Overall, it would make sense to do this with 3 separate terminal sessions :

1.  node server.js
      - this is the process you're debugging : get its PID with
        (`ps fax | grep node` in Linux, for instance).

2.  curl http://localhost:9999/XYZ
      - stimulates the server to do something

3.  jstrace -p <server-pid> watcher.js
      - gives you the jstrace messages
